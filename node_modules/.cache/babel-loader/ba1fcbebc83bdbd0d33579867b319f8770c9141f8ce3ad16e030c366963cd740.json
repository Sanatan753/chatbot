{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\testi\\\\OneDrive\\\\Documents\\\\Portfolio\\\\chatbot\\\\src\\\\chatbot.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const location = useLocation();\n  const {\n    selectedField,\n    response\n  } = location.state || {}; // Get initial field and response from state\n\n  // Set up state for conversation\n  const [messages, setMessages] = React.useState([{\n    sender: \"bot\",\n    content: response || \"Loading...\"\n  } // Initial message from bot\n  ]);\n  const [userInput, setUserInput] = React.useState(\"\"); // To hold user input\n\n  // Function to handle user input submission\n  const handleSendMessage = async () => {\n    if (!userInput.trim()) return; // Don't send if input is empty\n\n    // Add user message to the conversation\n    setMessages(prevMessages => [...prevMessages, {\n      sender: \"user\",\n      content: userInput\n    }]);\n\n    // Send user message to the server\n    try {\n      const response = await fetch(\"http://localhost:5000/get-chat-response\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt: userInput\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to get response from bot\");\n      }\n      const data = await response.json();\n      const botMessage = data.response || \"Sorry, I couldn't understand that.\";\n\n      // Add bot response to the conversation\n      setMessages(prevMessages => [...prevMessages, {\n        sender: \"bot\",\n        content: botMessage\n      }]);\n      setUserInput(\"\"); // Clear input field after sending message\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      setMessages(prevMessages => [...prevMessages, {\n        sender: \"bot\",\n        content: \"Something went wrong. Please try again.\"\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"outer-col-1\",\n      children: \"Navigation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outer-col-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: \"Header\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inner-col\",\n          children: [/*#__PURE__*/_jsxDEV(\"article\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\"Chatbot: \", selectedField || \"None\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"chat-history\",\n                children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `message ${msg.sender}`,\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: msg.content\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 23\n                  }, this)\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-input\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: userInput,\n                  onChange: e => setUserInput(e.target.value),\n                  placeholder: \"Type your message...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: handleSendMessage,\n                  children: \"Send\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n            children: \"Footer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n          children: \"Aside\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"q9w9miMyHfCv89VRVPDwVcsN0zc=\", false, function () {\n  return [useLocation];\n});\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useLocation","jsxDEV","_jsxDEV","Chatbot","_s","location","selectedField","response","state","messages","setMessages","useState","sender","content","userInput","setUserInput","handleSendMessage","trim","prevMessages","fetch","method","headers","body","JSON","stringify","prompt","ok","Error","data","json","botMessage","error","console","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/testi/OneDrive/Documents/Portfolio/chatbot/src/chatbot.js"],"sourcesContent":["import React from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport \"./chatbot.css\";\r\n\r\nfunction Chatbot() {\r\n  const location = useLocation();\r\n  const { selectedField, response } = location.state || {};  // Get initial field and response from state\r\n  \r\n  // Set up state for conversation\r\n  const [messages, setMessages] = React.useState([\r\n    { sender: \"bot\", content: response || \"Loading...\" },  // Initial message from bot\r\n  ]);\r\n  const [userInput, setUserInput] = React.useState(\"\");  // To hold user input\r\n\r\n  // Function to handle user input submission\r\n  const handleSendMessage = async () => {\r\n    if (!userInput.trim()) return;  // Don't send if input is empty\r\n\r\n    // Add user message to the conversation\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { sender: \"user\", content: userInput },\r\n    ]);\r\n\r\n    // Send user message to the server\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/get-chat-response\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ prompt: userInput }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to get response from bot\");\r\n      }\r\n      const data = await response.json();\r\n      const botMessage = data.response || \"Sorry, I couldn't understand that.\";\r\n\r\n      // Add bot response to the conversation\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: \"bot\", content: botMessage },\r\n      ]);\r\n\r\n      setUserInput(\"\");  // Clear input field after sending message\r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: \"bot\", content: \"Something went wrong. Please try again.\" },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <nav className=\"outer-col-1\">Navigation</nav>\r\n      <div className=\"outer-col-2\">\r\n        <header>Header</header>\r\n        <div className=\"inner-row\">\r\n          <div className=\"inner-col\">\r\n            <article>\r\n              <h2>Chatbot: {selectedField || \"None\"}</h2>\r\n              <div className=\"chat-container\">\r\n                {/* Display messages */}\r\n                <div className=\"chat-history\">\r\n                  {messages.map((msg, index) => (\r\n                    <div key={index} className={`message ${msg.sender}`}>\r\n                      <p>{msg.content}</p>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n\r\n                {/* Input and send message section */}\r\n                <div className=\"message-input\">\r\n                  <input\r\n                    type=\"text\"\r\n                    value={userInput}\r\n                    onChange={(e) => setUserInput(e.target.value)}\r\n                    placeholder=\"Type your message...\"\r\n                  />\r\n                  <button onClick={handleSendMessage}>Send</button>\r\n                </div>\r\n              </div>\r\n            </article>\r\n            <footer>Footer</footer>\r\n          </div>\r\n          <aside>Aside</aside>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}